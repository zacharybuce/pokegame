"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _dexdata = require('./dex-data');




































































































































































































































































































































































































































































































































































































































 class Condition extends _dexdata.BasicEffect 
 {
	
	

	
	
	
	
	

	constructor(data) {
		super(data);
		data = this;
		this.effectType = (['Weather', 'Status'].includes(data.effectType) ? data.effectType : 'Condition');
	}
} exports.Condition = Condition;

const EMPTY_CONDITION = new Condition({name: '', exists: false});

 class DexConditions {
	
	 __init() {this.conditionCache = new Map()}

	constructor(dex) {;DexConditions.prototype.__init.call(this);
		this.dex = dex;
	}

	get(name) {
		if (!name) return EMPTY_CONDITION;
		if (typeof name !== 'string') return name ;

		return this.getByID(name.startsWith('item:') || name.startsWith('ability:') ? name  : _dexdata.toID.call(void 0, name));
	}

	getByID(id) {
		if (!id) return EMPTY_CONDITION;

		let condition = this.conditionCache.get(id);
		if (condition) return condition;

		let found;
		if (id.startsWith('item:')) {
			const item = this.dex.items.getByID(id.slice(5) );
			condition = {...item, id: 'item:' + item.id } ;
		} else if (id.startsWith('ability:')) {
			const ability = this.dex.abilities.getByID(id.slice(8) );
			condition = {...ability, id: 'ability:' + ability.id } ;
		} else if (this.dex.data.Rulesets.hasOwnProperty(id)) {
			condition = this.dex.formats.get(id) ;
		} else if (this.dex.data.Conditions.hasOwnProperty(id)) {
			condition = new Condition({name: id, ...this.dex.data.Conditions[id]});
		} else if (
			(this.dex.data.Moves.hasOwnProperty(id) && (found = this.dex.data.Moves[id]).condition) ||
			(this.dex.data.Abilities.hasOwnProperty(id) && (found = this.dex.data.Abilities[id]).condition) ||
			(this.dex.data.Items.hasOwnProperty(id) && (found = this.dex.data.Items[id]).condition)
		) {
			condition = new Condition({name: found.name || id, ...found.condition});
		} else if (id === 'recoil') {
			condition = new Condition({name: 'Recoil', effectType: 'Recoil'});
		} else if (id === 'drain') {
			condition = new Condition({name: 'Drain', effectType: 'Drain'});
		} else {
			condition = new Condition({name: id, exists: false});
		}

		this.conditionCache.set(id, condition);
		return condition;
	}
} exports.DexConditions = DexConditions;

 //# sourceMappingURL=sourceMaps/dex-conditions.js.map